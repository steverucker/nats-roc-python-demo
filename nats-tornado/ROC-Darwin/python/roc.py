# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_roc', [dirname(__file__)])
        except ImportError:
            import _roc
            return _roc
        if fp is not None:
            try:
                _mod = imp.load_module('_roc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _roc = swig_import_helper()
    del swig_import_helper
else:
    import _roc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_float():
    return _roc.new_float()
new_float = _roc.new_float

def copy_float(value):
    return _roc.copy_float(value)
copy_float = _roc.copy_float

def delete_float(obj):
    return _roc.delete_float(obj)
delete_float = _roc.delete_float

def float_assign(obj, value):
    return _roc.float_assign(obj, value)
float_assign = _roc.float_assign

def float_value(obj):
    return _roc.float_value(obj)
float_value = _roc.float_value

def new_uint8_t():
    return _roc.new_uint8_t()
new_uint8_t = _roc.new_uint8_t

def copy_uint8_t(value):
    return _roc.copy_uint8_t(value)
copy_uint8_t = _roc.copy_uint8_t

def delete_uint8_t(obj):
    return _roc.delete_uint8_t(obj)
delete_uint8_t = _roc.delete_uint8_t

def uint8_t_assign(obj, value):
    return _roc.uint8_t_assign(obj, value)
uint8_t_assign = _roc.uint8_t_assign

def uint8_t_value(obj):
    return _roc.uint8_t_value(obj)
uint8_t_value = _roc.uint8_t_value

def new_size_t():
    return _roc.new_size_t()
new_size_t = _roc.new_size_t

def copy_size_t(value):
    return _roc.copy_size_t(value)
copy_size_t = _roc.copy_size_t

def delete_size_t(obj):
    return _roc.delete_size_t(obj)
delete_size_t = _roc.delete_size_t

def size_t_assign(obj, value):
    return _roc.size_t_assign(obj, value)
size_t_assign = _roc.size_t_assign

def size_t_value(obj):
    return _roc.size_t_value(obj)
size_t_value = _roc.size_t_value

def new_roc_gallery():
    return _roc.new_roc_gallery()
new_roc_gallery = _roc.new_roc_gallery

def copy_roc_gallery(value):
    return _roc.copy_roc_gallery(value)
copy_roc_gallery = _roc.copy_roc_gallery

def delete_roc_gallery(obj):
    return _roc.delete_roc_gallery(obj)
delete_roc_gallery = _roc.delete_roc_gallery

def roc_gallery_assign(obj, value):
    return _roc.roc_gallery_assign(obj, value)
roc_gallery_assign = _roc.roc_gallery_assign

def roc_gallery_value(obj):
    return _roc.roc_gallery_value(obj)
roc_gallery_value = _roc.roc_gallery_value

def new_roc_host_id():
    return _roc.new_roc_host_id()
new_roc_host_id = _roc.new_roc_host_id

def copy_roc_host_id(value):
    return _roc.copy_roc_host_id(value)
copy_roc_host_id = _roc.copy_roc_host_id

def delete_roc_host_id(obj):
    return _roc.delete_roc_host_id(obj)
delete_roc_host_id = _roc.delete_roc_host_id

def roc_host_id_assign(obj, value):
    return _roc.roc_host_id_assign(obj, value)
roc_host_id_assign = _roc.roc_host_id_assign

def roc_host_id_value(obj):
    return _roc.roc_host_id_value(obj)
roc_host_id_value = _roc.roc_host_id_value

def new_roc_similarity():
    return _roc.new_roc_similarity()
new_roc_similarity = _roc.new_roc_similarity

def copy_roc_similarity(value):
    return _roc.copy_roc_similarity(value)
copy_roc_similarity = _roc.copy_roc_similarity

def delete_roc_similarity(obj):
    return _roc.delete_roc_similarity(obj)
delete_roc_similarity = _roc.delete_roc_similarity

def roc_similarity_assign(obj, value):
    return _roc.roc_similarity_assign(obj, value)
roc_similarity_assign = _roc.roc_similarity_assign

def roc_similarity_value(obj):
    return _roc.roc_similarity_value(obj)
roc_similarity_value = _roc.roc_similarity_value

def new_char_array(nelements):
    return _roc.new_char_array(nelements)
new_char_array = _roc.new_char_array

def delete_char_array(ary):
    return _roc.delete_char_array(ary)
delete_char_array = _roc.delete_char_array

def char_array_getitem(ary, index):
    return _roc.char_array_getitem(ary, index)
char_array_getitem = _roc.char_array_getitem

def char_array_setitem(ary, index, value):
    return _roc.char_array_setitem(ary, index, value)
char_array_setitem = _roc.char_array_setitem

def new_roc_template_array(nelements):
    return _roc.new_roc_template_array(nelements)
new_roc_template_array = _roc.new_roc_template_array

def delete_roc_template_array(ary):
    return _roc.delete_roc_template_array(ary)
delete_roc_template_array = _roc.delete_roc_template_array

def roc_template_array_getitem(ary, index):
    return _roc.roc_template_array_getitem(ary, index)
roc_template_array_getitem = _roc.roc_template_array_getitem

def roc_template_array_setitem(ary, index, value):
    return _roc.roc_template_array_setitem(ary, index, value)
roc_template_array_setitem = _roc.roc_template_array_setitem

def new_roc_similarity_array(nelements):
    return _roc.new_roc_similarity_array(nelements)
new_roc_similarity_array = _roc.new_roc_similarity_array

def delete_roc_similarity_array(ary):
    return _roc.delete_roc_similarity_array(ary)
delete_roc_similarity_array = _roc.delete_roc_similarity_array

def roc_similarity_array_getitem(ary, index):
    return _roc.roc_similarity_array_getitem(ary, index)
roc_similarity_array_getitem = _roc.roc_similarity_array_getitem

def roc_similarity_array_setitem(ary, index, value):
    return _roc.roc_similarity_array_setitem(ary, index, value)
roc_similarity_array_setitem = _roc.roc_similarity_array_setitem

def new_roc_candidate_array(nelements):
    return _roc.new_roc_candidate_array(nelements)
new_roc_candidate_array = _roc.new_roc_candidate_array

def delete_roc_candidate_array(ary):
    return _roc.delete_roc_candidate_array(ary)
delete_roc_candidate_array = _roc.delete_roc_candidate_array

def roc_candidate_array_getitem(ary, index):
    return _roc.roc_candidate_array_getitem(ary, index)
roc_candidate_array_getitem = _roc.roc_candidate_array_getitem

def roc_candidate_array_setitem(ary, index, value):
    return _roc.roc_candidate_array_setitem(ary, index, value)
roc_candidate_array_setitem = _roc.roc_candidate_array_setitem

def new_roc_person_id_array(nelements):
    return _roc.new_roc_person_id_array(nelements)
new_roc_person_id_array = _roc.new_roc_person_id_array

def delete_roc_person_id_array(ary):
    return _roc.delete_roc_person_id_array(ary)
delete_roc_person_id_array = _roc.delete_roc_person_id_array

def roc_person_id_array_getitem(ary, index):
    return _roc.roc_person_id_array_getitem(ary, index)
roc_person_id_array_getitem = _roc.roc_person_id_array_getitem

def roc_person_id_array_setitem(ary, index, value):
    return _roc.roc_person_id_array_setitem(ary, index, value)
roc_person_id_array_setitem = _roc.roc_person_id_array_setitem

_roc.ROC_VERSION_MAJOR_swigconstant(_roc)
ROC_VERSION_MAJOR = _roc.ROC_VERSION_MAJOR

_roc.ROC_VERSION_MINOR_swigconstant(_roc)
ROC_VERSION_MINOR = _roc.ROC_VERSION_MINOR

_roc.ROC_VERSION_PATCH_swigconstant(_roc)
ROC_VERSION_PATCH = _roc.ROC_VERSION_PATCH

_roc.ROC_VERSION_STRING_swigconstant(_roc)
ROC_VERSION_STRING = _roc.ROC_VERSION_STRING

def roc_ensure(error):
    return _roc.roc_ensure(error)
roc_ensure = _roc.roc_ensure

def roc_initialize(sdk_path):
    return _roc.roc_initialize(sdk_path)
roc_initialize = _roc.roc_initialize

def roc_finalize():
    return _roc.roc_finalize()
roc_finalize = _roc.roc_finalize

def roc_get_host_id(host_id):
    return _roc.roc_get_host_id(host_id)
roc_get_host_id = _roc.roc_get_host_id

def roc_free_host_id(host_id):
    return _roc.roc_free_host_id(host_id)
roc_free_host_id = _roc.roc_free_host_id

_roc.ROC_GRAY8_swigconstant(_roc)
ROC_GRAY8 = _roc.ROC_GRAY8

_roc.ROC_BGR24_swigconstant(_roc)
ROC_BGR24 = _roc.ROC_BGR24
class roc_image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, roc_image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, roc_image, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _roc.roc_image_data_set
    __swig_getmethods__["data"] = _roc.roc_image_data_get
    if _newclass:
        data = _swig_property(_roc.roc_image_data_get, _roc.roc_image_data_set)
    __swig_setmethods__["width"] = _roc.roc_image_width_set
    __swig_getmethods__["width"] = _roc.roc_image_width_get
    if _newclass:
        width = _swig_property(_roc.roc_image_width_get, _roc.roc_image_width_set)
    __swig_setmethods__["height"] = _roc.roc_image_height_set
    __swig_getmethods__["height"] = _roc.roc_image_height_get
    if _newclass:
        height = _swig_property(_roc.roc_image_height_get, _roc.roc_image_height_set)
    __swig_setmethods__["step"] = _roc.roc_image_step_set
    __swig_getmethods__["step"] = _roc.roc_image_step_get
    if _newclass:
        step = _swig_property(_roc.roc_image_step_get, _roc.roc_image_step_set)
    __swig_setmethods__["color_space"] = _roc.roc_image_color_space_set
    __swig_getmethods__["color_space"] = _roc.roc_image_color_space_get
    if _newclass:
        color_space = _swig_property(_roc.roc_image_color_space_get, _roc.roc_image_color_space_set)

    def __init__(self):
        this = _roc.new_roc_image()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _roc.delete_roc_image
    __del__ = lambda self: None
roc_image_swigregister = _roc.roc_image_swigregister
roc_image_swigregister(roc_image)


def roc_free_image(image):
    return _roc.roc_free_image(image)
roc_free_image = _roc.roc_free_image

def roc_read_image(file_name, color_space, image):
    return _roc.roc_read_image(file_name, color_space, image)
roc_read_image = _roc.roc_read_image

def roc_decode_image(len, data, color_space, image):
    return _roc.roc_decode_image(len, data, color_space, image)
roc_decode_image = _roc.roc_decode_image

def roc_set_thumbnail_parameters(width, height, scale, quality):
    return _roc.roc_set_thumbnail_parameters(width, height, scale, quality)
roc_set_thumbnail_parameters = _roc.roc_set_thumbnail_parameters

_roc.ROC_FRONTAL_swigconstant(_roc)
ROC_FRONTAL = _roc.ROC_FRONTAL

_roc.ROC_FULL_swigconstant(_roc)
ROC_FULL = _roc.ROC_FULL

_roc.ROC_PARTIAL_swigconstant(_roc)
ROC_PARTIAL = _roc.ROC_PARTIAL

_roc.ROC_MANUAL_swigconstant(_roc)
ROC_MANUAL = _roc.ROC_MANUAL

_roc.ROC_FR_swigconstant(_roc)
ROC_FR = _roc.ROC_FR

_roc.ROC_ID_swigconstant(_roc)
ROC_ID = _roc.ROC_ID

_roc.ROC_PITCHYAW_swigconstant(_roc)
ROC_PITCHYAW = _roc.ROC_PITCHYAW

_roc.ROC_GENDER_swigconstant(_roc)
ROC_GENDER = _roc.ROC_GENDER

_roc.ROC_AGE_swigconstant(_roc)
ROC_AGE = _roc.ROC_AGE

_roc.ROC_OCCLUSION_swigconstant(_roc)
ROC_OCCLUSION = _roc.ROC_OCCLUSION

_roc.ROC_LIPS_swigconstant(_roc)
ROC_LIPS = _roc.ROC_LIPS

_roc.ROC_THUMBNAIL_swigconstant(_roc)
ROC_THUMBNAIL = _roc.ROC_THUMBNAIL

_roc.ROC_INVALID_swigconstant(_roc)
ROC_INVALID = _roc.ROC_INVALID

_roc.ROC_TEMPLATE_VERSION_swigconstant(_roc)
ROC_TEMPLATE_VERSION = _roc.ROC_TEMPLATE_VERSION

_roc.ROC_TEMPLATE_VERSION_MASK_swigconstant(_roc)
ROC_TEMPLATE_VERSION_MASK = _roc.ROC_TEMPLATE_VERSION_MASK

def roc_preload(algorithm_id):
    return _roc.roc_preload(algorithm_id)
roc_preload = _roc.roc_preload

def roc_landmarks_to_face(left_eye_x, left_eye_y, right_eye_x, right_eye_y, chin_x, chin_y, face_x, face_y, face_width, face_height):
    return _roc.roc_landmarks_to_face(left_eye_x, left_eye_y, right_eye_x, right_eye_y, chin_x, chin_y, face_x, face_y, face_width, face_height)
roc_landmarks_to_face = _roc.roc_landmarks_to_face

_roc.ROC_NO_TIMESTAMP_swigconstant(_roc)
ROC_NO_TIMESTAMP = _roc.ROC_NO_TIMESTAMP

_roc.ROC_UNKNOWN_PERSON_swigconstant(_roc)
ROC_UNKNOWN_PERSON = _roc.ROC_UNKNOWN_PERSON
class roc_template(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, roc_template, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, roc_template, name)
    __repr__ = _swig_repr
    __swig_setmethods__["algorithm_id"] = _roc.roc_template_algorithm_id_set
    __swig_getmethods__["algorithm_id"] = _roc.roc_template_algorithm_id_get
    if _newclass:
        algorithm_id = _swig_property(_roc.roc_template_algorithm_id_get, _roc.roc_template_algorithm_id_set)
    __swig_setmethods__["timestamp"] = _roc.roc_template_timestamp_set
    __swig_getmethods__["timestamp"] = _roc.roc_template_timestamp_get
    if _newclass:
        timestamp = _swig_property(_roc.roc_template_timestamp_get, _roc.roc_template_timestamp_set)
    __swig_setmethods__["x"] = _roc.roc_template_x_set
    __swig_getmethods__["x"] = _roc.roc_template_x_get
    if _newclass:
        x = _swig_property(_roc.roc_template_x_get, _roc.roc_template_x_set)
    __swig_setmethods__["y"] = _roc.roc_template_y_set
    __swig_getmethods__["y"] = _roc.roc_template_y_get
    if _newclass:
        y = _swig_property(_roc.roc_template_y_get, _roc.roc_template_y_set)
    __swig_setmethods__["width"] = _roc.roc_template_width_set
    __swig_getmethods__["width"] = _roc.roc_template_width_get
    if _newclass:
        width = _swig_property(_roc.roc_template_width_get, _roc.roc_template_width_set)
    __swig_setmethods__["height"] = _roc.roc_template_height_set
    __swig_getmethods__["height"] = _roc.roc_template_height_get
    if _newclass:
        height = _swig_property(_roc.roc_template_height_get, _roc.roc_template_height_set)
    __swig_setmethods__["confidence"] = _roc.roc_template_confidence_set
    __swig_getmethods__["confidence"] = _roc.roc_template_confidence_get
    if _newclass:
        confidence = _swig_property(_roc.roc_template_confidence_get, _roc.roc_template_confidence_set)
    __swig_setmethods__["person_id"] = _roc.roc_template_person_id_set
    __swig_getmethods__["person_id"] = _roc.roc_template_person_id_get
    if _newclass:
        person_id = _swig_property(_roc.roc_template_person_id_get, _roc.roc_template_person_id_set)
    __swig_setmethods__["md_size"] = _roc.roc_template_md_size_set
    __swig_getmethods__["md_size"] = _roc.roc_template_md_size_get
    if _newclass:
        md_size = _swig_property(_roc.roc_template_md_size_get, _roc.roc_template_md_size_set)
    __swig_setmethods__["fv_size"] = _roc.roc_template_fv_size_set
    __swig_getmethods__["fv_size"] = _roc.roc_template_fv_size_get
    if _newclass:
        fv_size = _swig_property(_roc.roc_template_fv_size_get, _roc.roc_template_fv_size_set)
    __swig_setmethods__["tn_size"] = _roc.roc_template_tn_size_set
    __swig_getmethods__["tn_size"] = _roc.roc_template_tn_size_get
    if _newclass:
        tn_size = _swig_property(_roc.roc_template_tn_size_get, _roc.roc_template_tn_size_set)
    __swig_setmethods__["md"] = _roc.roc_template_md_set
    __swig_getmethods__["md"] = _roc.roc_template_md_get
    if _newclass:
        md = _swig_property(_roc.roc_template_md_get, _roc.roc_template_md_set)
    __swig_setmethods__["fv"] = _roc.roc_template_fv_set
    __swig_getmethods__["fv"] = _roc.roc_template_fv_get
    if _newclass:
        fv = _swig_property(_roc.roc_template_fv_get, _roc.roc_template_fv_set)
    __swig_setmethods__["tn"] = _roc.roc_template_tn_set
    __swig_getmethods__["tn"] = _roc.roc_template_tn_get
    if _newclass:
        tn = _swig_property(_roc.roc_template_tn_get, _roc.roc_template_tn_set)

    def __init__(self):
        this = _roc.new_roc_template()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _roc.delete_roc_template
    __del__ = lambda self: None
roc_template_swigregister = _roc.roc_template_swigregister
roc_template_swigregister(roc_template)


def roc_represent(image, algorithm_id, min_size, k, false_detection_rate, templates):
    return _roc.roc_represent(image, algorithm_id, min_size, k, false_detection_rate, templates)
roc_represent = _roc.roc_represent

def roc_free_template(template_):
    return _roc.roc_free_template(template_)
roc_free_template = _roc.roc_free_template

def roc_flatten(template_, buffer):
    return _roc.roc_flatten(template_, buffer)
roc_flatten = _roc.roc_flatten

def roc_unflatten(buffer, template_):
    return _roc.roc_unflatten(buffer, template_)
roc_unflatten = _roc.roc_unflatten

def roc_flattened_bytes(template_, bytes):
    return _roc.roc_flattened_bytes(template_, bytes)
roc_flattened_bytes = _roc.roc_flattened_bytes

def roc_read_template(file, template_):
    return _roc.roc_read_template(file, template_)
roc_read_template = _roc.roc_read_template

def roc_read_template_fd(fd, template_):
    return _roc.roc_read_template_fd(fd, template_)
roc_read_template_fd = _roc.roc_read_template_fd

def roc_write_template(file, template_):
    return _roc.roc_write_template(file, template_)
roc_write_template = _roc.roc_write_template

def roc_write_template_fd(fd, template_):
    return _roc.roc_write_template_fd(fd, template_)
roc_write_template_fd = _roc.roc_write_template_fd

def roc_get_metadata(template_, key, value, value_length):
    return _roc.roc_get_metadata(template_, key, value, value_length)
roc_get_metadata = _roc.roc_get_metadata

def roc_set_metadata(template_, key, value):
    return _roc.roc_set_metadata(template_, key, value)
roc_set_metadata = _roc.roc_set_metadata

def roc_open_gallery(gallery_file, gallery, progress):
    return _roc.roc_open_gallery(gallery_file, gallery, progress)
roc_open_gallery = _roc.roc_open_gallery

def roc_temporary_gallery(gallery):
    return _roc.roc_temporary_gallery(gallery)
roc_temporary_gallery = _roc.roc_temporary_gallery

def roc_enroll(gallery, template_):
    return _roc.roc_enroll(gallery, template_)
roc_enroll = _roc.roc_enroll

def roc_size(gallery, size):
    return _roc.roc_size(gallery, size)
roc_size = _roc.roc_size

def roc_at(gallery, index, template_):
    return _roc.roc_at(gallery, index, template_)
roc_at = _roc.roc_at

def roc_remove(gallery, index):
    return _roc.roc_remove(gallery, index)
roc_remove = _roc.roc_remove

def roc_close_gallery(gallery):
    return _roc.roc_close_gallery(gallery)
roc_close_gallery = _roc.roc_close_gallery

def roc_template_limit(template_limit):
    return _roc.roc_template_limit(template_limit)
roc_template_limit = _roc.roc_template_limit

def roc_compare_templates(a, b, similarity):
    return _roc.roc_compare_templates(a, b, similarity)
roc_compare_templates = _roc.roc_compare_templates

def roc_compare_galleries(target, query, similarity_matrix):
    return _roc.roc_compare_galleries(target, query, similarity_matrix)
roc_compare_galleries = _roc.roc_compare_galleries
class roc_candidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, roc_candidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, roc_candidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _roc.roc_candidate_index_set
    __swig_getmethods__["index"] = _roc.roc_candidate_index_get
    if _newclass:
        index = _swig_property(_roc.roc_candidate_index_get, _roc.roc_candidate_index_set)
    __swig_setmethods__["similarity"] = _roc.roc_candidate_similarity_set
    __swig_getmethods__["similarity"] = _roc.roc_candidate_similarity_get
    if _newclass:
        similarity = _swig_property(_roc.roc_candidate_similarity_get, _roc.roc_candidate_similarity_set)

    def __init__(self):
        this = _roc.new_roc_candidate()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _roc.delete_roc_candidate
    __del__ = lambda self: None
roc_candidate_swigregister = _roc.roc_candidate_swigregister
roc_candidate_swigregister(roc_candidate)
cvar = _roc.cvar
ROC_INVALID_TEMPLATE_INDEX = cvar.ROC_INVALID_TEMPLATE_INDEX


def roc_search(gallery, probe, k, min_similarity, candidates):
    return _roc.roc_search(gallery, probe, k, min_similarity, candidates)
roc_search = _roc.roc_search

def roc_knn(gallery, probes, k, min_similarity, neighbors):
    return _roc.roc_knn(gallery, probes, k, min_similarity, neighbors)
roc_knn = _roc.roc_knn

def roc_rerank(gallery, k, candidates):
    return _roc.roc_rerank(gallery, k, candidates)
roc_rerank = _roc.roc_rerank

def roc_cluster(gallery, k, neighbors, aggressiveness):
    return _roc.roc_cluster(gallery, k, neighbors, aggressiveness)
roc_cluster = _roc.roc_cluster

def roc_track(gallery, max_time_separation, min_detection_overlap, min_similarity):
    return _roc.roc_track(gallery, max_time_separation, min_detection_overlap, min_similarity)
roc_track = _roc.roc_track

def roc_consolidate(gallery, max_similarity, max_count):
    return _roc.roc_consolidate(gallery, max_similarity, max_count)
roc_consolidate = _roc.roc_consolidate

def roc_person_ids(gallery, person_ids):
    return _roc.roc_person_ids(gallery, person_ids)
roc_person_ids = _roc.roc_person_ids
# This file is compatible with both classic and new-style classes.


